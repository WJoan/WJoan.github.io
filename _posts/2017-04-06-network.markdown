---
layout:     post
title:      "网络知识"
subtitle:   "计算机网络基础知识"
date:       2017-04-06 16:34:23
author:     "Joan"
tags:		"网络"
---

# 基本知识

以下两篇文章来自阮一峰的博客，它们分别自底向上、自顶向下的介绍了计算机网络的构成。是非常好的入门文章，也可以帮助学习过网络知识的同学梳理清晰计算机网络的整体脉络。

[-> 互联网协议入门(1)](http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html)

[-> 互联网协议入门(2)](http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html)


# 各层协议

## 总结

TCP/IP协议族分为四部分：应用层、传输层、网络层、网络接口层（数据链路层+物理层）。
OSI有七层，分别为：应用层、表示层、会话层、传输层、网络层、数据链路层、物理层。

|OSI中的层|功能|TCP/IP协议族|
|:--------|:---|:-----------|
|应用层|文件传输，电子邮件，文件服务，虚拟终端|TFTP，`HTTP`，SNMP，`FTP`，SMTP，`DNS`，Telnet 等等|
|表示层|数据格式化，代码转换，数据加密|没有协议|
|会话层|解除或建立与别的接点的联系|没有协议|
|传输层|提供端对端的接口|`TCP`，`UDP`|
|网络层|为数据包选择路由|`IP`，`ARP`，`ICMP`，OSPF，EIGRP，IGMP|
|数据链路层|传输有地址的帧以及错误检测功能|SLIP，CSLIP，PPP，MTU|
|物理层|以二进制数据形式在物理媒体上传输数据|ISO2110，IEEE802，`IEEE802.2`|

## 网络层

网络层包括：

* IP(Internet Protocol）协议
* ICMP(Internet Control Message Protocol)控制报文协议
* ARP(Address Resolution Protocol）地址转换协议
* RARP(Reverse ARP)反向地址转换协议。

IP是网络层的核心，通过路由选择将下一条IP封装后交给接口层。IP数据报是`无连接服务`。
ICMP是网络层的补充，可以回送报文。用来检测网络是否通畅。Ping命令就是发送ICMP的echo包，通过回送的echo relay进行网络测试。

## 传输层

传输层协议主要包括：

- TCP(Transmission Control Protocol）传输控制协议
- UDP(User Datagram protocol）用户数据报协议

**TCP与UDP的区别**

|TCP|UDP|
|---|---|
|TCP是`面向连接`的通信协议，只能用于`端到端`的通讯，更加`安全`|UDP是面向`无连接`的通讯协议，可以实现`广播`发送，容易被欺骗、不安全|
|TCP提供的是一种`可靠`的数据流服务，采用`确认重传`来实现传输的可靠性，采用`滑动窗口`来进行流量控制|UDP属于`不可靠`的传输，可能会出现`丢包`现象|
|TCP数据包中包括序号和确认，所以未按照顺序收到的包可以被`排序`，而损坏的包可以被重传|UDP不管数据包的顺序、错误或重发|
|面向连接的服务（例如Telnet、FTP、rlogin、X Windows和SMTP）需要`高度的可靠性`，所以它们使用了TCP。DNS在某些情况下使用TCP（发送和接收域名数据库）|UDP主要用于那些面向`查询-应答`这样的`信息量交换较少`的服务。使用UDP的服务包括NTP（网络时间协议）和DNS（DNS也使用TCP）|

## 应用层

应用层协议主要包括如下几个：

- FTP(File Transfer Protocol）是文件传输协议，一般上传下载用FTP服务，数据端口是20H，控制端口是21H。
- Telnet服务是用户远程登录服务，使用23H端口，使用明码传送，保密性差、简单方便。
- DNS(Domain Name Service）是域名解析服务，提供域名到IP地址之间的转换，使用端口53。
- SMTP(Simple Mail Transfer Protocol）是简单邮件传输协议，用来控制信件的发送、中转，使用端口25。
- NFS（Network File System）是网络文件系统，用于网络中不同主机间的文件共享。
- HTTP(Hypertext Transfer Protocol）是超文本传输协议，用于实现互联网中的WWW服务，使用端口80。

# 当你在浏览器输入回车后发生了什么

这是一道非常经典的面试题。

https://github.com/skyline75489/what-happens-when-zh_CN

# DNS

# TCP

## TCP三次握手和四次挥手

无论是三次握手还是四次挥手，双方都进行了两个来回的“沟通”，即SYN/FIN、ACK、SYN/FIN、ACK。只是在三次握手中，server的发送的`SYN`以及`ACK`一起发送了。其中发送`SYN`或者`FIN`的时候需要跟随一个`seq`（序列号），返回`ACK`的时候需要附带一个`ack`=seq+1(即接收方期望接收的下一个序列号)。[详细过程>>](http://www.2cto.com/net/201310/251896.html)

<a href="#">
    <img src="{{ site.baseurl }}/img/network-tcp-3.png" alt="network-tcp-3">
</a>


<a href="#">
    <img src="{{ site.baseurl }}/img/network-tcp-4.png" alt="network-tcp-4">
</a>

### 客户端TCP状态迁移：
CLOSED->SYN_SENT->ESTABLISHED->FIN_WAIT_1->FIN_WAIT_2->TIME_WAIT->CLOSED

### 服务器TCP状态迁移：
CLOSED->LISTEN->SYN收到->ESTABLISHED->CLOSE_WAIT->LAST_ACK->CLOSED

### Q1：建立连接协议是三次握手，而关闭连接却是四次握手呢？
这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。

### Q2：TCP四次挥手中的2MSL是什么？
第四次握手的ACK包后就进入了`TIME_WAIT`状态，必须在此状态上停留两倍的`MSL`时间（Maximum Segment Lifetime英文的缩写，中文可以译为“报文最大生存时间”），等待2MSL时间主要目的是怕最后一个ACK包对方没收到，那么对方在超时后将重发第三次握手的FIN包，主动关闭端接到重发的FIN包后可以再发一个ACK应答包。在`TIME_WAIT`状态时两端的端口不能使用，要等到2MSL时间结束才可继续使用。

### Q3：服务器端的CLOSE_WAIT状态是指什么？
在收到客户端的FIN之后，服务器又没有发送FIN之前，服务器端会处于`CLOSE_WAIT`状态。主要是因为在服务器发送FIN之前，也就是停止服务器向客户端发送数据之前，要把没有发送完的数据发送完毕。

## 流量控制与拥塞控制

# HTTP

http://www.ruanyifeng.com/blog/2016/08/http.html

# HTTPS

